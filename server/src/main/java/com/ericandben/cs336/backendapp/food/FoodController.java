package com.ericandben.cs336.backendapp.food;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Page;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/foods") // This means URL's start with /demo (after Application path)
public class FoodController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private FoodRepository foodRepository;


	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/summary")
	public @ResponseBody Page<Food> summary(@RequestParam(value = "page", defaultValue = "0") int page,
	@RequestParam(value = "limit", defaultValue = "15") int limit) {
		return foodRepository.findAll(PageRequest.of(page, limit));
	}


	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewFood (@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Food n = new Food();
		n.setName(name);
		foodRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Food> getAllFoods() {
		// This returns a JSON or XML with the users
		return foodRepository.findAll();
	}
}