package com.ericandben.cs336.backendapp.transaction;

import com.ericandben.cs336.backendapp.item.*;
import com.ericandben.cs336.backendapp.bar.*;
import com.ericandben.cs336.backendapp.drinker.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/transactions") // This means URL's start with /demo (after Application path)
public class TransactionController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private TransactionRepository transactionRepository;
	
	@Autowired
	private BarRepository barRepository;
	
	@Autowired
    private ItemRepository itemRepository;
    
    @Autowired
    private DrinkerRepository drinkerRepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewSells (@RequestParam String barName) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

        Transaction n = new Transaction();

		Bar bar = barRepository.findByName(barName);
        n.setBar(bar);
        n.setTid(10000L);

        Drinker d = drinkerRepository.findByName("Aaron Endo");
        n.setDrinker(d);

		transactionRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Transaction> getAllTransactions() {
		// This returns a JSON or XML with the users
		return transactionRepository.findAll();
    }
    
    @GetMapping(path="/find")
    public @ResponseBody Iterable<Transaction> findByTid(@RequestParam int tid) {
        return null;
    }
}