package com.ericandben.cs336.backendapp.beer;

import java.sql.Time;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.CrossOrigin;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/beers") // This means URL's start with /demo (after Application path)
public class BeerController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private BeerRepository beerRepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewBeer (@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Beer n = new Beer();
		n.setName(name);
		beerRepository.save(n);
		return "Saved";
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Beer> getAllBeers() {
		// This returns a JSON or XML with the users
		return beerRepository.findAll();
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/topFiveBars")
	public @ResponseBody Page<List<Object[]>> getTopFiveBars(@RequestParam String beerName) {
		return beerRepository.topFiveBars(PageRequest.of(0,5), beerName);
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/topFiveDrinkers")
	public @ResponseBody Page<List<Object[]>> getTopFiveDrinkers(@RequestParam String beerName) {
		return beerRepository.topFiveDrinkers(PageRequest.of(0,5), beerName);
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/timedistsales")
	public @ResponseBody Map<String,Double> timeDistSales(@RequestParam String beer, @RequestParam String begin, @RequestParam String end) {
		// This returns a JSON or XML with the users
		return getTimeDistQueryResult(beer,begin,end);
	}
	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/timedistsalesperweek")
	public @ResponseBody Map<String,Double> timeDistSalesPerWeek(@RequestParam String beer, @RequestParam String begin) {
		// This returns a JSON or XML with the users
		return getTimeDistQueryResultPerWeek(beer,begin);
	}
	public Map<String,Double> getTimeDistQueryResult(String beer, String beginDate, String endDate){
		Map<String,String[]> intervals = new LinkedHashMap<>();
		String[] morning = {"09:00:00","12:00:00"};
		String[] afternoon = {"12:00:00","18:00:00"};
		String[] evening = {"18:00:00","23:59:59"};
		String[] lateEvening = {"00:00:00","03:00:00"};
		intervals.put("morning 09:00:00 - 12:00:00",morning);
		intervals.put("afternoon 12:00:00 - 18:00:00",afternoon);
		intervals.put("evening 18:00:00 - 23:59:59",evening);
		intervals.put("lateEvening 00:00:00 - 03:00:00",lateEvening);
		Map<String,Double> results = new LinkedHashMap<>();
		for (Map.Entry<String, String[]> entry : intervals.entrySet())
		{
			try{
				DateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
				ft.setTimeZone(TimeZone.getTimeZone("UTC-5"));
				DateFormat formatter = new SimpleDateFormat("HH:mm:ss");
				formatter.setTimeZone(TimeZone.getTimeZone("UTC-5"));
				Time beginTime = new Time(formatter.parse(entry.getValue()[0]).getTime());
				Time endTime = new Time(formatter.parse(entry.getValue()[1]).getTime());
				Date beginDateObj = ft.parse(beginDate);
				Date endDateObj = ft.parse(endDate);
				Double br = beerRepository.timeDistSalesPerBeer(beer, beginDateObj, endDateObj,
				beginTime,
				endTime);
				results.put(entry.getKey(),br);
			}
			catch(ParseException e){
				System.out.println(e);
			}
		}
		return results;
	}
	public Map<String,Double> getTimeDistQueryResultPerWeek(String beer, String beginDate){
			Map<String,Double> results = new LinkedHashMap<>();
			try{
				DateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
				ft.setTimeZone(TimeZone.getTimeZone("UTC-5"));
				DateFormat formatter = new SimpleDateFormat("HH:mm:ss");
				formatter.setTimeZone(TimeZone.getTimeZone("UTC-5"));
				Date currentDateObj = ft.parse(beginDate);
				String currentDateString = beginDate;
				for(int i = 0; i < 6; i++){
					Calendar c = Calendar.getInstance();
					c.setTime(currentDateObj);
					c.add(Calendar.DATE, 1);  // number of days to add
					String dt = ft.format(c.getTime());  // dt is now the new date
					Date endDateObj = ft.parse(dt);
					Double br = beerRepository.timeDistSalesPerBeerPerWeek(beer, currentDateObj, endDateObj);
					if(br == null){
						br = 0.0;
					}
					results.put(currentDateString,br);
					currentDateString = dt;
					currentDateObj = endDateObj;
				}
			}
			catch(ParseException e){
				System.out.println(e);
			}
			return results;
	}
}