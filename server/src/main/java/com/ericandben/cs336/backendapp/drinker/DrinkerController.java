package com.ericandben.cs336.backendapp.drinker;
import com.ericandben.cs336.backendapp.transaction.*;
import com.ericandben.cs336.backendapp.includes.*;
import com.ericandben.cs336.backendapp.sells.*;
import com.ericandben.cs336.backendapp.likes.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Map;
import java.util.TimeZone;
import java.util.List;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/drinkers") // This means URL's start with /demo (after Application path)
public class DrinkerController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private DrinkerRepository drinkerRepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewDrinker (@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Drinker d = new Drinker();
		d.setName(name);
		drinkerRepository.save(d);
		return "Saved";
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/summary")
	public @ResponseBody Page<Drinker> summary(@RequestParam(value = "page", defaultValue = "0") int page,
	@RequestParam(value = "limit", defaultValue = "15") int limit) {
		return drinkerRepository.findAll(PageRequest.of(page, limit));
	}


	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Drinker> getAllDrinkers() {
		return drinkerRepository.findAll();
	}


	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/likestest")
	public @ResponseBody Iterable<Likes> getAllLikes() {
		return drinkerRepository.getLikes();
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/sellstest")
	public @ResponseBody Iterable<Sells> getAllSells() {
		return drinkerRepository.getSells();
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/topbarsperdrinker")
	public @ResponseBody List<BarAndTotalSpent> topBarsPerDrinker(@RequestParam String drinker,
												@RequestParam String begin, @RequestParam String end) {
		return drinkerRepository.barsByTotalSpentWithinTimeInterval(drinker, begin, end);
	}
	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/topbeersperdrinker")
	public @ResponseBody Page<List<Object[]>> topBeersPerDrinker(@RequestParam String drinker) {
		return drinkerRepository.topBeersForDrinker(PageRequest.of(0,5), drinker);
	}
	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/alltransactionsfordrinker")
	public @ResponseBody List<Object[]> getAllTransactionsForDrinker(@RequestParam String drinker) {
		SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		List<Object[]> list = drinkerRepository.allTransactionsForDrinker(drinker);
		for(Object[] obj : list){
			SimpleDateFormat ft2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			ft2.setTimeZone(TimeZone.getTimeZone("UTC-5"));
			String dateString = ft2.format(obj[3]);
			obj[3] = dateString;
		}
		return list;
	}
	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/spendingperweek")
	public @ResponseBody List<Object[]> getSpendingPerWeek(@RequestParam String drinker, @RequestParam String beginDate,
	@RequestParam String endDate) {
		SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
		try{
			List<Object[]> list = drinkerRepository.spendingPerDrinkerPerWeek(drinker,ft.parse(beginDate), ft.parse(endDate));
			for(Object[] obj : list){
				SimpleDateFormat ft2 = new SimpleDateFormat("yyyy-MM-dd");
				ft2.setTimeZone(TimeZone.getTimeZone("UTC-5"));
				String dateString = ft2.format(obj[0]);
				obj[0] = dateString;
			}
			return list;
		}
		catch(ParseException e){

		}
		return null;
	}
	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/spendingpermonth")
	public @ResponseBody List<Object[]> getSpendingPerMonth(@RequestParam String drinker) {
		return drinkerRepository.spendingPerDrinkerPerMonth(drinker);
	}
}