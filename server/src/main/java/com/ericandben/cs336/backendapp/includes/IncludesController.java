package com.ericandben.cs336.backendapp.includes;

import com.ericandben.cs336.backendapp.item.*;
import com.ericandben.cs336.backendapp.transaction.*;
import com.ericandben.cs336.backendapp.bar.*;
import com.ericandben.cs336.backendapp.drinker.*;

import org.hibernate.annotations.SourceType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/includes") // This means URL's start with /demo (after Application path)
public class IncludesController {

	private static final Logger logger = LoggerFactory.getLogger(IncludesController.class);	

	 // This means to get the bean called userRepository
	 // Which is auto-generated by Spring, we will use it to handle the data
	@Autowired
	private IncludesRepository includesRepository;
    
    @Autowired
    private TransactionRepository transactionRepository;
	
	@Autowired
	private ItemRepository itemRepository;

	@Autowired BarRepository barRepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewIncludes (@RequestParam String barName, @RequestParam int tid, 
				@RequestParam String itemName, @RequestParam int quantity) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Includes n = new Includes();
		IncludesKey iKey = new IncludesKey();

		TransactionKey key = new TransactionKey();
		key.setBar(barRepository.findByName(barName));
		key.setTid(tid);

		iKey.setTransactionKey(key);
		iKey.setItem(itemRepository.findByName(itemName));
		n.setPkey(iKey);
		n.setQuantity(quantity);

		logger.warn("INCLUDES REPOSITORY:");
		logger.warn(includesRepository.toString());
		logger.warn("" + n.getPkey().hashCode());
		logger.warn("" + key.hashCode());
		logger.warn("GOT PAST IT");

		logger.warn("INCLUDES OBJECT:");
		logger.warn(n.toString());

		includesRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Includes> getAllTuples() {
		// This returns a JSON or XML with the users
		return includesRepository.findAll();
	}

}