package com.ericandben.cs336.backendapp.drinker;
import com.ericandben.cs336.backendapp.transaction.*;
import com.ericandben.cs336.backendapp.includes.*;
import com.ericandben.cs336.backendapp.sells.*;
import com.ericandben.cs336.backendapp.likes.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/drinkers") // This means URL's start with /demo (after Application path)
public class DrinkerController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private DrinkerRepository drinkerRepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewDrinker (@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Drinker d = new Drinker();
		d.setName(name);
		drinkerRepository.save(d);
		return "Saved";
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Drinker> getAllDrinkers() {
		return drinkerRepository.findAll();
	}


	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/likestest")
	public @ResponseBody Iterable<Likes> getAllLikes() {
		return drinkerRepository.getLikes();
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/sellstest")
	public @ResponseBody Iterable<Sells> getAllSells() {
		return drinkerRepository.getSells();
	}

	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/topbarsperdrinker")
	public @ResponseBody List<BarAndTotalSpent> topBarsPerDrinker(@RequestParam String drinker,
												@RequestParam String begin, @RequestParam String end) {
		return drinkerRepository.barsByTotalSpentWithinTimeInterval(drinker, begin, end);
	}
	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/topbeersperdrinker")
	public @ResponseBody Page<List<Object[]>> topBeersPerDrinker(@RequestParam String drinker) {
		return drinkerRepository.topBeersForDrinker(PageRequest.of(0,5), drinker);
	}
	@CrossOrigin(origins = "http://localhost:4200")
	@GetMapping(path="/alltransactionsfordrinker")
	public @ResponseBody List<Object[]> getAllTransactionsForDrinker(@RequestParam String drinker) {
		return drinkerRepository.allTransactionsForDrinker(drinker);
	}
}